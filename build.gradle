buildscript {
    ext {
        gradleVersion = '5.6.2'
        jdkVersion = JavaVersion.VERSION_1_8
        // jdkVersion = JavaVersion.VERSION_11
        junitVersion = '5.4.2'
        assertJVersion = '3.11.1'
        defaultEncoding = 'UTF-8'
        flexMarkJavaVersion = '0.50.40'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.8.RELEASE"
        classpath "com.gradle.publish:plugin-publish-plugin:0.10.1"
    }
}

wrapper {
    gradleVersion = "${gradleVersion}"
}

apply {
    plugin 'java'
    plugin 'java-library'
    plugin 'eclipse'
}

[compileJava, compileTestJava]*.options*.encoding = "${defaultEncoding}"
sourceCompatibility = "${jdkVersion}"
targetCompatibility = "${jdkVersion}"
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test.compileClasspath += configurations.compileOnly
    test.runtimeClasspath += configurations.compileOnly
}
test {
    useJUnitPlatform()
}
javadoc {
    options.charSet = "${defaultEncoding}"
    options.encoding = "${defaultEncoding}"
}

task initSrcDirs {
    doLast {
        sourceSets.all {
            java.srcDirs*.mkdirs()
        }
    }
}
tasks.eclipse.dependsOn(initSrcDirs)

apply plugin: "io.spring.dependency-management"
dependencyManagement {
    imports {
        mavenBom "com.vladsch.flexmark:flexmark-java:${flexMarkJavaVersion}"
    }
}

repositories {
    mavenCentral()
}
dependencies {
    implementation gradleApi()
    testImplementation platform("org.junit:junit-bom:${junitVersion}")
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation "org.assertj:assertj-core:${assertJVersion}"

    implementation('com.vladsch.flexmark:flexmark')
    implementation('com.vladsch.flexmark:flexmark-ext-media-tags')
    implementation('com.vladsch.flexmark:flexmark-ext-tables')
    implementation('com.vladsch.flexmark:flexmark-ext-definition')
    implementation('com.vladsch.flexmark:flexmark-ext-typographic')
    implementation('com.vladsch.flexmark:flexmark-ext-toc')
    // https://github.com/vsch/flexmark-java/wiki/Usage#include-markdown-and-html-file-content
    implementation('com.vladsch.flexmark:flexmark-ext-jekyll-tag')
    // https://github.com/vsch/flexmark-java/wiki/Admonition-Extension
    implementation('com.vladsch.flexmark:flexmark-ext-admonition')
    // https://github.com/vsch/flexmark-java/wiki/Extensions#anchorlink
    implementation('com.vladsch.flexmark:flexmark-ext-anchorlink')
    // https://github.com/vsch/flexmark-java/wiki/Attributes-Extension
    implementation('com.vladsch.flexmark:flexmark-ext-attributes')
    // https://github.com/vsch/flexmark-java/wiki/Extensions#footnotes
    implementation('com.vladsch.flexmark:flexmark-ext-footnotes')
    // https://github.com/vsch/flexmark-java/wiki/Extensions#gfm-tasklist
    implementation('com.vladsch.flexmark:flexmark-ext-gfm-tasklist')
    // https://github.com/vsch/flexmark-java/wiki/Extensions#gitlab-flavoured-markdown
    implementation('com.vladsch.flexmark:flexmark-ext-gitlab')
    // https://github.com/vsch/flexmark-java/wiki/Extensions#macros
    implementation('com.vladsch.flexmark:flexmark-ext-macros')

    // https://github.com/vsch/flexmark-java/wiki/Extensions#docx-converter
    // https://github.com/vsch/flexmark-java/wiki/Customizing-Docx-Rendering
    implementation('com.vladsch.flexmark:flexmark-docx-converter')
    // https://github.com/vsch/flexmark-java/wiki/PDF-Renderer-Converter
    implementation('com.vladsch.flexmark:flexmark-pdf-converter')
}

}